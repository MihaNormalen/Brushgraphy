config file for brushograph https://github.com/veselinovicp/brushograph

In the "trays" section, you set coordinates for your containers. X & Y numbers represent the center of the container. 
Containers are named C, M, Y, K plus additionals (you can add more containers), since you can separate .jpg into CMYK+ masks. 
The program will prioritize additional colors and add CMYK only if needed.

"trays": {   
    {
        "water": {
            "x": 7,
            "y": 3
        },
        "cyan": {
            "x": 53,
            "y": 3
        },
        "magenta": {
            "x": 98,
            "y": 3
        },
        "yellow": {
            "x": 143,
            "y": 3
        },
        "kroma": {
            "x": 652,
            "y": 63
        },
        "additionals": {
            "#5897D0": // You can multiply blocks to add more custom colors
            {
                "x": 803,
                "y": 63
            },
            "#89D142": {
                "x": 957,
                "y": 63
            }
        }
    },
    "additionals": ["#5897D0", "#0093C3"], // You need to write additional hex values here
    "separation": {
        "selection": // In this section, you select files that will be processed in G-code.
                     When you run the CMYK operation, a folder will be created with all CMYK+ masks ending in **_C_0**.
                     "C" means cyan and "0" is the level number. 
                     You can add this ending to any file and it will be processed.
                     Example: **something_C_0.jpg** or **something_C_0.svg**
                     For more files in one operation, files need same name and ending acording to container C fo cyan conteiner and so on.
        {
            "C": 0,
            "M": 0,
            "Y": 0,
            "K": 2,
            "additionals": {
                "#5897D0": 2,
                "#0093C3": 0
            }
        },
        "levels": 4 // Number of CMYK+ levels you want to split your image 
    },
    "color_order": ["C"], // Here, list files in the order you want them to be executed. Example: ["C", "K", "M", "#5897D0"]
                          // It will use files with endings like **_C_0, _K_0, _M_0, _#5897D0_2**
    "brushograph": {
        "width": 140, // Width of a file in mm
        "height": 115, // Height of a file in mm
        "canvas_height": 0, // Canvas height - use a thicker plate if needed
        "go_in_tray_lift": 8, // Lift on Z-axis when going into a container for color
        "remove_drops_lift": 5, // Lift when exiting the container, so it hits the edge and removes excess color
        "move_to_other_shape_lift": 2, // Lift on Z-axis when painting
        "tray_enter_radius": 10, // Must be smaller than the radius of the container
        "remove_drops_radius": 20, // Radius for exiting the container, typically the same or slightly larger
        "offset_y": 25, // Y & X offset for image **(0,0)** position
        "offset_x": 0,
        "paint_per_run_min": 120, // Minimum path length when painting
        "paint_per_run_max": 140, // Maximum path length
        "prepare_paint_count": 3, // Number of initial color mixing cycles
        "moves": {
            "normal": { // Speed settings for actual painting (usually slower)
                "acc": "M204 P20 T10",
                "feedrate_1": "G0 F1000",
                "feedrate_2": "M203 X1000 Y1000 Z1000"
            },
            "fast": { // Speed settings for color retrieval
                "acc": "M204 P20 T20",
                "feedrate_1": "G0 F1500",
                "feedrate_2": "M203 X1300 Y1300 Z1000"
            },
            "remove_drops": { // Speed settings for removing color
                "acc": "M204 P20 T20",
                "feedrate_1": "G0 F600",
                "feedrate_2": "M203 X600 Y600 Z500"
            }
        }
    },
    "slicer": {
        "infill_pattern": "concentric", // Since it's using CuraSlicer, you can set the infill pattern here
        "infill_line_distance": "0.5" // Distance between lines
    }
}

run command;
for cmyk+ seperation; python3 image_to_gcode_runner.py -f 4x/something.jpg -c small_machineM2.conf -s cmyk
// works only for bitmap image. -c configuration file, -s makes cmyk

for gcode; python3 image_to_gcode_runner.py -f 4x/something.svg  -c small_machineM2.conf -o GmajnaC.gcode -s gcode
// -f path to folder/file  _C_O since is calling all files with name something, so if you want to make more colors in one gcode 
they need same name with correct ending. You can use .png, .jpg .svg
-c configuratin file, -o gcode file name and -s making gcode
