# explenatory on how to use config file for brushograph https://github.com/veselinovicp/brushograph

#In the "trays" section, you set coordinates for your containers. X & Y numbers represent the center of the container. 
#Containers are named C, M, Y, K and additionals (you can add more containers), since you can separate .jpg into CMYK+any other hex you want. 
#Pogram 12gc.py will prioritize additional colors and add CMYK only if needed.
#-.jpg resoultion 72 pixel/in

"trays": {   
    {
        "water": {
            "x": 7,
            "y": 3
        },
        "cyan": {
            "x": 53,
            "y": 3
        },
        "magenta": {
            "x": 98,
            "y": 3
        },
        "yellow": {
            "x": 143,
            "y": 3
        },
        "kroma": {
            "x": 652,
            "y": 63
        },
        "additionals": {
            "#5897D0": # You can multiply blocks to add more custom colors
            {
                "x": 803,
                "y": 63
            },
            "#89D142": {
                "x": 957,
                "y": 63
            }
        }
    },
    "additionals": ["#5897D0", "#0093C3"], # You need to write additional hex values here, if you add more blocks.
    "separation": {
        "selection": # In this section, you set which files will be processed in to Gcode.
                     # When you run the CMYK operation, a folder will be created with all CMYK+ masks ending in **_C_0**. (more info on bottom.)
                     # "C" means cyan and "0" is the level number. 
                     # You can add this ending to any file and it will be processed. for using custom mask or .svg
                     # Example: **something_C_0.png** or **something_C_0.svg**
                     # For more files in one operation, files need to have same name and ending acording to container C fo cyan conteiner and so on.
        {
            "C": 0,
            "M": 0,
            "Y": 0,
            "K": 2,
            "additionals": {
                "#5897D0": 2,
                "#0093C3": 0
            }
        },
        "levels": 4 # Number of CMYK+ levels you want to split your image. Only for cmyk+ seperation.
    },
    "color_order": ["C"], # Here you list files in the order you want them to be executed. Example: ["C", "K", "M", "#5897D0"]
                           # in this case it will start with C then K...
                          # It will use files with endings like **_C_0, _K_2, _M_0, _#5897D0_2**
    "brushograph": { #values in mm
        "width": 140, # Width of a file 
        "height": 115, # Height of a file 
        "canvas_height": 0, # set canvas height, for thiker surface, ceramic tile for example.
        "go_in_tray_lift": 8, # Lift on Z-axis when going into a container for color
        "remove_drops_lift": 5, # Lift when exiting the container, so it hits the edge and removes excess color
        "move_to_other_shape_lift": 2, # Lift on Z-axis when painting
        "tray_enter_radius": 10, # Must be smaller than the radius of the container
        "remove_drops_radius": 20, # Radius for exiting the container, typically the same or slightly larger then radius of petridish
        "offset_y": 25, # Y & X offset for image **(0,0)** position
        "offset_x": 0,
        "paint_per_run_min": 120, # Minimum path length when painting. If you set this number really high you get gcode usefull for pen plotter.
        "paint_per_run_max": 140, # Maximum path length. For plotting set high number like 1000000.
        "prepare_paint_count": 3, # Number of initial color mixing cycles. 0 for plotter
        "moves": { # Speed settings for actual painting (usually slower)
            "normal": { 
                "acc": "M204 P20 T10",
                "feedrate_1": "G0 F1000",
                "feedrate_2": "M203 X1000 Y1000 Z1000"
            }, # Speed settings for to get color move (faster).
            "fast": { 
                "acc": "M204 P20 T20",
                "feedrate_1": "G0 F1500",
                "feedrate_2": "M203 X1300 Y1300 Z1000"
            }, # Speed settings for removing color (really slow).
            "remove_drops": { 
                "acc": "M204 P20 T20",
                "feedrate_1": "G0 F600",
                "feedrate_2": "M203 X600 Y600 Z500"
            }
        }
    },
    "slicer": { # set yor infill pattern, 
        "infill_pattern": "concentric", # or; "grid": "Grid",
                        #"triangles": "Triangles",
                        #"trihexagon": "Tri-Hexagon",
                        #"cubic": "Cubic",
                        #"cubicsubdiv": "Cubic Subdivision",
                        #"tetrahedral": "Octet",
                        #"quarter_cubic": "Quarter Cubic",
                        #"concentric": "Concentric",
                        #"zigzag": "Zig Zag",
                        #"cross": "Cross",
                        #"cross_3d": "Cross 3D",
                        #"gyroid": "Gyroid"
        "infill_line_distance": "0.5" # Distance between lines
    }
}

# execute with; for cmyk+ seperation; python3 image_to_gcode_runner.py -f 4x/something.jpg -c mini_brushograph.conf -s cmyk
# works only for bitmap image. -c configuration file, -s makes cmyk

# for gcode; python3 image_to_gcode_runner.py -f 4x/something.svg  -c mini_brushograph.conf -o GmajnaC.gcode -s gcode
# -f path to folder/file  _C_O since is calling all files with name something, so if you want to make more colors in one gcode 
# they need same name with correct ending. You can use .png, .jpg .svg
# -c configuratin file, -o gcode file name and -s making gcode

# It is procesor demanding task, so for bigger files with a lot of details and curves it can take some time to process.
